import matplotlib as plot
import numpy as np

#subroutine init
icopro = 1 
ipara = 0
icpara = 0
irest = 0
iuprof = 1
jstam = 0
iexit = 2
itcalc = 1               
stab = 0.35
updef = 1.35
iim = 90
jim = 22
kim = 97
jn1 = -1
jnim = -1
kn1 = 1
knim = 1
kb = 0
ia = 0
ib = 0
itamax = 9600
fx = 2.38
fy = 1
fz = 0.64
epsi = 0.05
stat = 0.001
tstat = 0.0007
beta0 = 1.8
alphat = 1
re = 790
pr = 0.7
gam = 1.4
xm2 = 0.1*10**(-3)
twall = 1
tentry =  0
rtwti = 1.3
grf = 0 


ire =iim-1
jre =jim-1
kre= kim-1

if ((abs(fy-1.0))<=0.001):
  deltay = 1./(jre-1)
  deltax = fx*deltay
  deltaz = fz*deltay

if ((abs(fz-1.0))<=0.001):
  deltaz = 1./(kre-1)
  deltay =fy*deltaz
  deltax =fx*deltaz


rdx =1./deltax
rdy =1./deltay
rdz =1./deltaz

deltx2 =deltax**2
delty2 =deltay**2
deltz2 =deltaz**2

#*******************constant properties**************************
'''
      if (icopro.eq.1) go to 11
c
      
c
'''
# 11
deltat =stab*deltax
rev =1./re
pev =1./(re*pr)
idt =iim-2
jdt =jim-2
kdt =kim-2

u1 = np.zeros((iim,jim,kim))
u2 = np.zeros((iim,jim,kim))
v1 = np.zeros((iim,jim,kim))
v2 = np.zeros((iim,jim,kim))
w1 = np.zeros((iim,jim,kim))
w2 = np.zeros((iim,jim,kim))
t1 = np.zeros((iim,jim,kim))
t2 = np.zeros((iim,jim,kim))
p = np.zeros((iim,jim,kim))
ro = np.zeros((iim,jim,kim))
eta = np.zeros((iim,jim,kim))

isum = 0

qinlet = np.zeros((jim,kim))
tinlet = np.zeros((jim,kim))

def tigrad():
    global icopro,ipara,icpara,irest,iuprof,jstam,iexit,itcalc,stab,updef 
    global iim,jim,kim,jn1,jnim,kn1,knim,kb,ia,ib,itamax,fx,fy,fz 
    global epsi,stat,tstat,beta0,alphat,re,pr,gam,xm2,twall,tentry,rtwti,grf  
    global ire,jre,kre,deltay,deltax,deltaz,rdx,rdy,rdz,deltx2,delty2,deltz2,deltat 
    global rev,pev,idt,jdt,kdt,u1,u2,v1,v2,w1,w2,t1,t2,p,ro,eta,qinlet,tinlet
    global iti,beta,divmax,imax,jmax,kmax,isum,deltch,alpha,dt,itmax,jtmax,ktmax
    global uinlet,vinlet,winlet,idtm,jdtm,kdtm,dact 
    #subroutine tigrad
    dtmax=0.
    '''
    c      dumax=0.
    c      dvmax=0.
    c      dwmax=0.
    
          do 80 i=2,(ire-1)
          do 80 j=2,jre
          do 80 k=2,kre
    '''
    for i in range(1,ire-1):
      for j in range(1,jre):
        for k in range(1,kre):
          dudt = abs(u1[i,j,k]-u2[i,j,k])/deltat
          dvdt = abs(v1[i,j,k]-v2[i,j,k])/deltat
          dwdt = abs(w1[i,j,k]-w2[i,j,k])/deltat
    
          dact=dtmax
          dtmax=max(dtmax,dudt,dvdt,dwdt)
          if(dtmax<=dact):
            continue
          else:
            idtm=i
            jdtm=j
            kdtm=k
    
    '''
    #************** constant properties *******************
    
          if(icopro.eq.1) then
    c
    c
          write(68,2)ita,iti,isum,dtmax,idtm,jdtm,kdtm,deltat,alpha
     2    format(2x,3i5,e13.5,2x,3i5,2x,2e13.5)
          else
     
          write(68,3)ita,iti,isum,dtmax,idtm,jdtm,kdtm,itt,
         *           itmax,jtmax,ktmax
     3    format(2x,3i5,e13.5,3i4,2x,i5,2x,3i4)
    c
    c
          end if
    c
    c
    c      write(6,4)idtm,jdtm,kdtm,dtmax
    c 4    format(2x,'maximum change in velocity :  ',2x,3i5,e13.5)
    
          if(dtmax*.1 .lt. epsi) epsi = dtmax*.1
    c
    c     write(6,*)'leaving tigrad'
    c
    c
          return
          end
    c
    c
    cccccccccccccccccccccccccccccccccccccccccccccccccccc
    '''
    return

def bcns():
    global icopro,ipara,icpara,irest,iuprof,jstam,iexit,itcalc,stab,updef 
    global iim,jim,kim,jn1,jnim,kn1,knim,kb,ia,ib,itamax,fx,fy,fz 
    global epsi,stat,tstat,beta0,alphat,re,pr,gam,xm2,twall,tentry,rtwti,grf  
    global ire,jre,kre,deltay,deltax,deltaz,rdx,rdy,rdz,deltx2,delty2,deltz2,deltat 
    global rev,pev,idt,jdt,kdt,u1,u2,v1,v2,w1,w2,t1,t2,p,ro,eta,qinlet,tinlet
    global iti,beta,divmax,imax,jmax,kmax,isum,deltch,alpha,dt,itmax,jtmax,ktmax
    global uinlet,vinlet,winlet,idtm,jdtm,kdtm
    #      subroutine bcns
    '''
    c     boundary-conditions for the navier-stokes equations
    c     conditions for the confining surfaces. This also
    c     calls bco.f
    '''
    
    j =1
    for i in range(iim):
      for k in range (kim):
        u2[i,j-1,k] =jn1*u2[i,j,k]
        w2[i,j-1,k] =jn1*w2[i,j,k]
        v2[i,j-1,k]=0.
    
    
    
    j =jim-1
    for i in range(iim):
      for k in range (kim):
        u2[i,j,k] =jnim*u2[i,j-1,k]
        w2[i,j,k] =jnim*w2[i,j-1,k]   
        v2[i,j-1,k]=0.
    
    k =1
    for i in range(iim):
      for j in range (jim):
        u2[i,j,k-1] =kn1*u2[i,j,k]
        v2[i,j,k-1] =kn1*v2[i,j,k]
        w2[i,j,k-1] =0.
    
    if (ipara==1): 
      i = 0
      for j in range(jim):
        for k in range (kim):
          u2[i,j,k] = uinlet[1,j,k]
          u2[i+1,j,k]=uinlet[2,j,k]
          v2[i,j,k] =vinlet[1,j,k]
          v2[i+1,j,k]=vinlet[2,j,k]
          w2[i,j,k] =winlet[1,j,k]
          w2[i+1,j,k]=winlet[2,j,k]  
      
    else:
      i =0
      for j in range(jim):
          for k in range (kim):
            u2[i,j,k] =qinlet[j,k]
            v2[i,j,k] =-v2[i+1,j,k]
            w2[i,j,k] =-w2[i+1,j,k]
    
    #c************ obstacle-boundary-conditions ***************
    
    #bco()
    
    k = kim-1
    for i in range(iim):
      for j in range(jim):
        u2[i,j,k]=knim*u2[i,j,k-1]
        v2[i,j,k]=knim*v2[i,j,k-1]       
        w2[i,j,k-1]=0.
    
    return

def nseqcp():
    global icopro,ipara,icpara,irest,iuprof,jstam,iexit,itcalc,stab,updef 
    global iim,jim,kim,jn1,jnim,kn1,knim,kb,ia,ib,itamax,fx,fy,fz 
    global epsi,stat,tstat,beta0,alphat,re,pr,gam,xm2,twall,tentry,rtwti,grf  
    global ire,jre,kre,deltay,deltax,deltaz,rdx,rdy,rdz,deltx2,delty2,deltz2,deltat 
    global rev,pev,idt,jdt,kdt,u1,u2,v1,v2,w1,w2,t1,t2,p,ro,eta,qinlet,tinlet
    global iti,beta,divmax,imax,jmax,kmax,isum,deltch,alpha,dt,itmax,jtmax,ktmax
    global uinlet,vinlet,winlet,idtm,jdtm,kdtm
    #subroutine nseqcp
    
    #navier-stokes equations for constant properties
    '''
          do 70 i=2,(ire-1)
          do 70 j=2,jre
          do 70 k=2,kre
    '''
    for i in range(1, ire-1):
      for j in range(1, jre):
        for k in range(1, kre):
          #diff-u     
          #duudx
          u1a = u1[i-1,j,k]  +  u1[i,j,k]
          u22 = u1[i-1,j,k]  -  u1[i,j,k]
          u3  = u1[i,j,k]    +  u1[i+1,j,k]
          u4  = u1[i,j,k]    -  u1[i+1,j,k]
    
          #duv  / dy
          u5 = u1[i,j-1,k]   +  u1[i,j,k]
          u6 = u1[i,j-1,k]   -  u1[i,j,k]
          u7 = u1[i,j,k]     +  u1[i,j+1,k]
          u8 = u1[i,j,k]     -  u1[i,j+1,k]
    
          #dwu  /  dz
          u9 = u1[i,j,k-1]   + u1[i,j,k]
          u10= u1[i,j,k-1]   - u1[i,j,k]
          u11= u1[i,j,k]     + u1[i,j,k+1]
          u12= u1[i,j,k]     - u1[i,j,k+1]
    
          #duv/dx
          u13 = u1[i-1,j,k]  + u1[i-1,j+1,k]
          u14 = u7
    
          #duw / dx
          u15 = u1[i-1,j,k]  + u1[i-1,j,k+1]
          u16 = u11
    
    
          #diff -v    
          #dvu / dx
          v1a = v1[i,j-1,k]   + v1[i+1,j-1,k]     
          v22 = v1[i,j,k]     + v1[i+1,j,k] 
    
          #duv / dx
          v3 = v1[i-1,j,k]    + v1[i,j,k]
          v4 = v1[i-1,j,k]    - v1[i,j,k]
          v5 = v1[i,j,k]      + v1[i+1,j,k]
          v6 = v1[i,j,k]      - v1[i+1,j,k]
    
          #dvv / dy
          v7 = v1[i,j-1,k]    + v1[i,j,k]
          v8 = v1[i,j-1,k]    - v1[i,j,k]
          v9 = v1[i,j,k]      + v1[i,j+1,k]
          v10= v1[i,j,k]      - v1[i,j+1,k]  
    
          #dwu / dz
          v11 = v1[i,j,k-1]   + v1[i,j,k]
          v12 = v1[i,j,k-1]   - v1[i,j,k] 
          v13 = v1[i,j,k]     + v1[i,j,k+1]
          v14 = v1[i,j,k]     - v1[i,j,k+1]    
    
          #dvw / dy
          v15 = v1[i,j-1,k]   + v1[i,j-1,k+1]
          v16 = v13
    
    
    
    
          #diff - w  
          #dwu / dz
          w1a = w1[i,j,k-1]   + w1[i+1,j,k-1]
          w22 = w1[i,j,k]     + w1[i+1,j,k]
    
          #dwv / dz     
          w3 = w1[i,j,k-1]    + w1[i,j+1,k-1]
          w4 = w1[i,j,k]      + w1[i,j+1,k]
    
          #duw / dx   
          w5 = w1[i-1,j,k]    + w1[i,j,k]
          w6 = w1[i-1,j,k]    - w1[i,j,k]
          w7 = w1[i,j,k]      + w1[i+1,j,k]
          w8 = w1[i,j,k]      - w1[i+1,j,k]
    
          #dvw / dy
          w9 = w1[i,j-1,k]    + w1[i,j,k]
          w10 = w1[i,j-1,k]   - w1[i,j,k]
          w11 = w1[i,j,k]     + w1[i,j+1,k]
          w12 = w1[i,j,k]     - w1[i,j+1,k]
    
          #dww / dz 
          w13 = w1[i,j,k-1]    + w1[i,j,k]
          w14 = w1[i,j,k-1]    - w1[i,j,k]
          w15 = w1[i,j,k]      + w1[i,j,k+1]
          w16 = w1[i,j,k]      - w1[i,j,k+1]
    
    
          '''
          #************* obstale-boundary-onditions *********************
    
          bcov[i,j,k]()
    
          #****************************************************************
          '''
    
          #u - deq 
    
          d2udx2 = (u22 - u4 ) / deltx2
          d2udy2 = (u6  - u8 ) / delty2
          d2udz2 = (u10 - u12 )/ deltz2
    
          dpdx = (p[i,j,k] - p[i+1,j,k]) / deltax
    
    
          duudx = 0.25*( u1a*u1a + alpha*abs(u1a)*u22 -u3*u3 -   alpha*abs(u3)*u4)/deltax
    
          dvudy = 0.25*( v1a*u5 + alpha*abs(v1a)*u6 -v22*u7 - alpha*abs(v22)*u8)/deltay
    
          dwudz = 0.25*( w1a*u9  + alpha*abs(w1a)*u10 -w22*u11 - alpha*abs(w22)*u12) /deltaz
    
    
          residu=deltat*(duudx+dvudy+dwudz+rev*(d2udx2+d2udy2+d2udz2))+u1[i,j,k]
    
    
          u2[i,j,k] = residu + deltat*dpdx
    
    
    
    
          #v - deq 
    
          d2vdx2 = (v4 - v6)/deltx2
          d2vdy2 = (v8 - v10)/delty2
          d2vdz2 = (v12 - v14)/deltz2
    
    
          dpdy = (p[i,j,k] - p[i,j+1,k])/deltay
    
    
          duvdx = 0.25*(u13*v3 + alpha*abs(u13)*v4-u14*v5 - alpha*abs(u14)*v6)/deltax
    
          dvvdy = 0.25*(v7*v7 + alpha*abs(v7)*v8 -v9*v9 - alpha*abs(v9)*v10)/deltay
    
          dwvdz = 0.25*(w3*v11 + alpha*abs(w3)*v12 -w4*v13 - alpha*abs(w4)*v14)/deltaz
    
          
          #body fore due to buoyancy
          thf = t1[i,j,k] + t1[i,j+1,k]
          gy = 0.5*grf*rev*rev*thf
          
    
          residv = deltat*(duvdx+dvvdy+dwvdz+rev*(d2vdx2+d2vdy2+ d2vdz2)+gy)+v1[i,j,k]
          v2[i,j,k] = residv + deltat*dpdy
    
    
    
    
    
    
          #w - deq 
    
          d2wdx2 = (w6 - w8)/deltx2
          d2wdy2 = (w10 - w12)/delty2
          d2wdz2 = (w14 - w16)/deltz2
    
          dpdz = (p[i,j,k]-p[i,j,k+1])/deltaz
    
    
          duwdx = 0.25*(u15*w5 + alpha*abs(u15)*w6 -u16*w7 - alpha*abs(u16)*w8)/deltax
    
          dvwdy = 0.25*(v15*w9 + alpha*abs(v15)*w10 -v16*w11 -alpha*abs(v16)*w12)/deltay
    
          dwwdz = 0.25*(w13*w13 + alpha*abs(w13)*w14 -w15*w15 - alpha*abs(w15)*w16)/deltaz
    
    
          residw = deltat*(duwdx+dvwdy+dwwdz+rev*(d2wdx2+d2wdy2+d2wdz2)) +w1[i,j,k]       
    
    
          w2[i,j,k] = residw+deltat*dpdz
    
    
    return

def temalt():
    global icopro,ipara,icpara,irest,iuprof,jstam,iexit,itcalc,stab,updef 
    global iim,jim,kim,jn1,jnim,kn1,knim,kb,ia,ib,itamax,fx,fy,fz 
    global epsi,stat,tstat,beta0,alphat,re,pr,gam,xm2,twall,tentry,rtwti,grf  
    global ire,jre,kre,deltay,deltax,deltaz,rdx,rdy,rdz,deltx2,delty2,deltz2,deltat 
    global rev,pev,idt,jdt,kdt,u1,u2,v1,v2,w1,w2,t1,t2,p,ro,eta,qinlet,tinlet
    global iti,beta,divmax,imax,jmax,kmax,isum,deltch,alpha,dt,itmax,jtmax,ktmax
    global uinlet,vinlet,winlet,idtm,jdtm,kdtm
     #      subroutine temalt
    
    #     alternation of the temperature-arrays
    '''
          do 10 i=1,iim
          do 10 j=1,jim
          do 10 k=1,kim
          '''
    for i in range(iim):
      for j in range (jim):
        for k in range(kim):
          t1[i,j,k] = t2[i,j,k]
          
def teqcp():
    global icopro,ipara,icpara,irest,iuprof,jstam,iexit,itcalc,stab,updef 
    global iim,jim,kim,jn1,jnim,kn1,knim,kb,ia,ib,itamax,fx,fy,fz 
    global epsi,stat,tstat,beta0,alphat,re,pr,gam,xm2,twall,tentry,rtwti,grf  
    global ire,jre,kre,deltay,deltax,deltaz,rdx,rdy,rdz,deltx2,delty2,deltz2,deltat 
    global rev,pev,idt,jdt,kdt,u1,u2,v1,v2,w1,w2,t1,t2,p,ro,eta,qinlet,tinlet
    global iti,beta,divmax,imax,jmax,kmax,isum,deltch,alpha,dt,itmax,jtmax,ktmax
    global uinlet,vinlet,winlet,idtm,jdtm,kdtm
    
    #      subroutine teqcp
    
    #     energy-equation for constant properties
    
    al = alphat
    dt =0.
    dalt = 0.
    deltt  = 0.015
    '''
          do 10 i=2,ire
          do 10 j=2,jre
          do 10 k=2,kre
    '''
    for i in range(1,ire):
      for j in range(1,jre):
        for k in range(1,kre):
          t1a = t1[i,j,k]+t1[i+1,j,k]
          t2a = t1[i,j,k]-t1[i+1,j,k]
          t3  = t1[i-1,j,k]+t1[i,j,k]
          t4  = t1[i-1,j,k]-t1[i,j,k]
          t5  = t1[i,j,k]+t1[i,j+1,k]
          t6  = t1[i,j,k]-t1[i,j+1,k]
          t7  = t1[i,j-1,k]+t1[i,j,k]
          t8  = t1[i,j-1,k]-t1[i,j,k]
          t9  = t1[i,j,k]+t1[i,j,k+1]
          t10 = t1[i,j,k]-t1[i,j,k+1]
          t11 = t1[i,j,k-1]+t1[i,j,k]
          t12 = t1[i,j,k-1]-t1[i,j,k]
    
    
          dtudx = (u2[i,j,k]*t1a+al*abs(u2[i,j,k])*t2a - u2[i-1,j,k]*t3-al*abs(u2[i-1,j,k])*t4)*0.5/deltax
    
          dtvdy = (v2[i,j,k]*t5+al*abs(v2[i,j,k])*t6-v2[i,j-1,k]*t7-al*abs(v2[i,j-1,k])*t8)*0.5/deltay
    
          dtwdz = (w2[i,j,k]*t9+al*abs(w2[i,j,k])*t10-w2[i,j,k-1]*t11-al*abs(w2[i,j,k-1])*t12)*0.5/deltaz
    
          d2tdx2 = (t4-t2a)/deltx2
          d2tdy2 = (t8-t6)/delty2
          d2tdz2 = (t12-t10)/deltz2
    
          residt = deltt*(-dtudx-dtvdy-dtwdz+pev*(d2tdx2+d2tdy2+d2tdz2))
                                                   
          t2[i,j,k] = t1[i,j,k]+residt
    
          dab = abs(t2[i,j,k]-t1[i,j,k])
          if(dab > dalt):
            dt = dab
            itmax = i
            jtmax = j
            ktmax = k
    
          dalt=dt
    
    return

def bct():
    global icopro,ipara,icpara,irest,iuprof,jstam,iexit,itcalc,stab,updef 
    global iim,jim,kim,jn1,jnim,kn1,knim,kb,ia,ib,itamax,fx,fy,fz 
    global epsi,stat,tstat,beta0,alphat,re,pr,gam,xm2,twall,tentry,rtwti,grf  
    global ire,jre,kre,deltay,deltax,deltaz,rdx,rdy,rdz,deltx2,delty2,deltz2,deltat 
    global rev,pev,idt,jdt,kdt,u1,u2,v1,v2,w1,w2,t1,t2,p,ro,eta,qinlet,tinlet
    global iti,beta,divmax,imax,jmax,kmax,isum,deltch,alpha,dt,itmax,jtmax,ktmax
    global uinlet,vinlet,winlet,idtm,jdtm,kdtm

    #      subroutine bct
    
    #     temperature-boundary-conditions for the confining surfaces  
    
    
    s1 = (1-jn1)*0.5
    s2 = (1+jn1)*0.5
    s3 = (1-jnim)*0.5
    s4 = (1+jnim)*0.5
    s5 = (1-kn1)*0.5 
    s6 = (1+kn1)*0.5
    s7 = (1-knim)*0.5
    s8 = (1+knim)*0.5
    
    tw5 = 5.*twall
    te4 = 4.*tentry
    f112 = 11./2.
    f32 = 3./2.
    
    
    if(ipara==1):
      i = 0
      for j in range (jim):
        for k in range (kim):
          t1[i,j,k] = 4.*tinlet[j,k]-4.*t1[i+1,j,k]+t1[i+2,j,k] 
          #t1(i,j,k) = tinlet(j,k)
    else:
      i = 0
      for j in range (jim):
        for k in range (kim):
          t1[i,j,k] = te4-4.*t1[i+1,j,k]+t1[i+2,j,k]
    
    
    j=0
    for i in range(iim):
      for k in range(kim):
        t1[i,j,k] = s1*(tw5-f112*t1[i,j+1,k]+f32*t1[i,j+2,k]) +s2*t1[i,j+1,k]
    
    
    j=jim-1
    for i in range(iim):
      for k in range(kim):
        t1[i,j,k] = s3*(tw5-f112*t1[i,j-1,k]+f32*t1[i,j-2,k]) +s4*t1[i,j-1,k]
     
                          
    k = 0
    for i in range(iim):
      for j in range(jim):
          t1[i,j,k] = s5*(tw5-f112*t1[i,j,k+1]+f32*t1[i,j,k+2])+s6*t1[i,j,k+1]
    
    
    k = kim-1
    for i in range(iim):
      for j in range(jim):
        t1[i,j,k] = s7*(tw5-f112*t1[i,j,k-1]+f32*t1[i,j,k-2])+s8*t1[i,j,k-1]
                                                     
    i = iim-1
    for j in range(jim):
      for k in range (kim):
        t1[i,j,k] = 2.*t1[i-1,j,k]-t1[i-1,j,k] 
    
    return



def ticorr():
    global icopro,ipara,icpara,irest,iuprof,jstam,iexit,itcalc,stab,updef 
    global iim,jim,kim,jn1,jnim,kn1,knim,kb,ia,ib,itamax,fx,fy,fz 
    global epsi,stat,tstat,beta0,alphat,re,pr,gam,xm2,twall,tentry,rtwti,grf  
    global ire,jre,kre,deltay,deltax,deltaz,rdx,rdy,rdz,deltx2,delty2,deltz2,deltat 
    global rev,pev,idt,jdt,kdt,u1,u2,v1,v2,w1,w2,t1,t2,p,ro,eta,qinlet,tinlet
    global iti,beta,divmax,imax,jmax,kmax,isum,deltch,alpha,dt,itmax,jtmax,ktmax
    global uinlet,vinlet,winlet,idtm,jdtm,kdtm
    #      subroutine ticorr
    
    #     calculation of the time-incrrement
    
    utop=0.
    vtop=0.
    wtop=0.
    '''
          do 40 j=2,jre
          do 40 i=2,ire
          do 40 k=2,kre
    '''
    for j in range(1,jre):
      for i in range(1,ire):
        for k in range(1,kre):
          uchek=0.5*(u2[i,j,k]+u2[i-1,j,k])
          vchek=0.5*(v2[i,j,k]+v2[i,j-1,k])
          wchek=0.5*(w2[i,j,k]+w2[i,j,k-1])
    
          utop =max(utop,abs(uchek))
          vtop =max(vtop,abs(vchek))
          wtop =max(wtop,abs(wchek))
    
    if(utop <= 0 or vtop <= 0 or wtop <= 0):
      deltat=deltax/utop
    else:
      umax =deltax/utop
      vmax =deltay/vtop
      wmax =deltaz/wtop
    
      deltat = min(umax,vmax,wmax)
    
          
    
    deltat = stab*0.5*deltat
    deltch=0.1*(deltx2*delty2*deltz2/(deltx2*delty2+delty2*deltz2+deltz2*deltx2))*re
    
    '''
    c     write(6,1) deltat
    c     write(6,2) deltch
         
     2    format(3x,' deltch = ',e13.5)
     1    format(3x,' deltat = ',e13.5)
    '''
    #deltat = min(deltat,deltch)
    #******************alpha-factor*************************************
    
    if(utop<=0 or vtop<=0  or wtop<=0):
      alpha = updef*utop*deltat/deltax
    else:
      udel = deltat/umax
      vdel = deltat/vmax
      wdel = deltat/wmax
    
      alpha = updef*max(udel,vdel,wdel)
    
    '''
          write(6,3)alpha
     3    format(3x,' alpha = ',e13.5)
    c
    c      write(6,*) 'leaving ticorr'
    c
    '''
    return

def velalt():
    global icopro,ipara,icpara,irest,iuprof,jstam,iexit,itcalc,stab,updef 
    global iim,jim,kim,jn1,jnim,kn1,knim,kb,ia,ib,itamax,fx,fy,fz 
    global epsi,stat,tstat,beta0,alphat,re,pr,gam,xm2,twall,tentry,rtwti,grf  
    global ire,jre,kre,deltay,deltax,deltaz,rdx,rdy,rdz,deltx2,delty2,deltz2,deltat 
    global rev,pev,idt,jdt,kdt,u1,u2,v1,v2,w1,w2,t1,t2,p,ro,eta,qinlet,tinlet
    global iti,beta,divmax,imax,jmax,kmax,isum,deltch,alpha,dt,itmax,jtmax,ktmax
    global uinlet,vinlet,winlet,idtm,jdtm,kdtm
    #      subroutine velalt
    
    #     alternation of the velocity-arrays
    
    for i in range(iim):
      for j in range(jim):
        for k in range(kim):
          u1[i,j,k]=u2[i,j,k]
          v1[i,j,k]=v2[i,j,k]
          w1[i,j,k]=w2[i,j,k]
    
    return

def ceqcp():
    global icopro,ipara,icpara,irest,iuprof,jstam,iexit,itcalc,stab,updef 
    global iim,jim,kim,jn1,jnim,kn1,knim,kb,ia,ib,itamax,fx,fy,fz 
    global epsi,stat,tstat,beta0,alphat,re,pr,gam,xm2,twall,tentry,rtwti,grf  
    global ire,jre,kre,deltay,deltax,deltaz,rdx,rdy,rdz,deltx2,delty2,deltz2,deltat 
    global rev,pev,idt,jdt,kdt,u1,u2,v1,v2,w1,w2,t1,t2,p,ro,eta,qinlet,tinlet
    global iti,beta,divmax,imax,jmax,kmax,isum,deltch,alpha,dt,itmax,jtmax,ktmax
    global uinlet,vinlet,winlet,idtm,jdtm,kdtm
    # subroutine ceqcp
    
    # mass continuity equation for constant properties
    
    
    divmax=0.
    dalt=0.
    imax=0
    jmax=0
    kmax=0
    
    '''
    do 20 i=2,ire
    do 20 j=2,jre
    do 20 k=2,kre
    '''
    for i in range(1, ire):
      for j in range(1, jre):
        for k in range(1, kre):
          
          div=(u2[i,j,k]-u2[i-1,j,k])/deltax + (v2[i,j,k]-v2[i,j-1,k])/deltay + (w2[i,j,k]-w2[i,j,k-1])/deltaz
    
          deltap=-beta*div
          a=deltat*deltap
          ax=a/deltax
          ay=a/deltay
          az=a/deltaz
    
          p[i,j,k]=p[i,j,k]+deltap
          u2[i,j,k]=u2[i,j,k]+ax
          u2[i-1,j,k]=u2[i-1,j,k]-ax
          v2[i,j,k]=v2[i,j,k]+ay
          v2[i,j-1,k]=v2[i,j-1,k]-ay
          w2[i,j,k]=w2[i,j,k]+az
          w2[i,j,k-1]=w2[i,j,k-1]-az
    
          dab=abs(div)
          if(dab>dalt):
              divmax=dab
              imax=i
              jmax=j
              kmax=k
          
          dalt=divmax
    
    
    
    iti=iti+1
    isum=isum+1
    
    return

def bco(): 
    global icopro,ipara,icpara,irest,iuprof,jstam,iexit,itcalc,stab,updef 
    global iim,jim,kim,jn1,jnim,kn1,knim,kb,ia,ib,itamax,fx,fy,fz 
    global epsi,stat,tstat,beta0,alphat,re,pr,gam,xm2,twall,tentry,rtwti,grf  
    global ire,jre,kre,deltay,deltax,deltaz,rdx,rdy,rdz,deltx2,delty2,deltz2,deltat 
    global rev,pev,idt,jdt,kdt,u1,u2,v1,v2,w1,w2,t1,t2,p,ro,eta,qinlet,tinlet
    global iti,beta,divmax,imax,jmax,kmax,isum,deltch,alpha,dt,itmax,jtmax,ktmax
    global uinlet,vinlet,winlet,idtm,jdtm,kdtm
    #      subroutine bco
    '''
    c     obstacle boundary conditions for the WINGLET to be
    c     called by the subroutines bcc bccst bcns bcnsst
    '''
    '''
    do 70 i=ia,ib
    do 70 j=2,(2+(i-ia))
    '''
    for i in range(ia-1,ib):
      for j in range(1,2+(i-ia)):
        k=(kb+1)+(i-ia)
        u2[i,j,k]=0.
        w2[i,j,k-1]=0.
    
    return

def bcc():
    global icopro,ipara,icpara,irest,iuprof,jstam,iexit,itcalc,stab,updef 
    global iim,jim,kim,jn1,jnim,kn1,knim,kb,ia,ib,itamax,fx,fy,fz 
    global epsi,stat,tstat,beta0,alphat,re,pr,gam,xm2,twall,tentry,rtwti,grf  
    global ire,jre,kre,deltay,deltax,deltaz,rdx,rdy,rdz,deltx2,delty2,deltz2,deltat 
    global rev,pev,idt,jdt,kdt,u1,u2,v1,v2,w1,w2,t1,t2,p,ro,eta,qinlet,tinlet
    global iti,beta,divmax,imax,jmax,kmax,isum,deltch,alpha,dt,itmax,jtmax,ktmax
    global uinlet,vinlet,winlet,idtm,jdtm,kdtm
    
    #      subroutine bcc
    '''
    c     boundary-conditions for the mass continuity equation
    c     conditions for the confining surfaces. This also 
    c     calls bco.f
    c
    '''
    if (ipara==1):
      i=1
      #u2[i,j,k]=uinlet[1,j,k]
      #v2[i+1,j,k]=vinlet[2,j,k]
      #w2[i+1,j,k]=winlet[2,j,k]
      
    else:
      i=0
      for j in range (jim):
        for k in range(kim):
          u2[i,j,k]=qinlet[j,k]
     
    
    j=0
    for i in range (iim):
        for k in range(kim):
          v2[i,j,k]=0
    
    
    j=jim-1
    for i in range (iim):
        for k in range(kim):
          v2[i,j-1,k]=0.
    
    k=0
    for i in range (iim):
        for j in range(jim):
          w2[i,j,k]=0.
    
    k=kim-1
    for i in range (iim):
        for j in range(jim):
          w2[i,j,k-1]=0.
    
    
    #c********  obstacle -boundary -conditions  ***************
         
    #bco()
    
    if(iti >=1 ):
      return
    
    if(iexit==1):
      i=iim-3
      for j in range(jim):
        for k in range(kim):
          u2[i+1,j,k]=u2[i,j,k]
          v2[i+1,j,k]=v2[i,j,k]
          w2[i+1,j,k]=w2[i,j,k]
          
    if(iexit==2):
      i=iim-2
      for j in range(jim):
          for k in range(kim):
            u2[i+1,j,k]=2.*u2[i,j,k]-u2[i-1,j,k]
            v2[i+1,j,k]=2.*v2[i,j,k]-v2[i-1,j,k]
            w2[i+1,j,k]=2.*w2[i,j,k]-w2[i-1,j,k]
           
    
    return

def conti():
    global icopro,ipara,icpara,irest,iuprof,jstam,iexit,itcalc,stab,updef 
    global iim,jim,kim,jn1,jnim,kn1,knim,kb,ia,ib,itamax,fx,fy,fz 
    global epsi,stat,tstat,beta0,alphat,re,pr,gam,xm2,twall,tentry,rtwti,grf  
    global ire,jre,kre,deltay,deltax,deltaz,rdx,rdy,rdz,deltx2,delty2,deltz2,deltat 
    global rev,pev,idt,jdt,kdt,u1,u2,v1,v2,w1,w2,t1,t2,p,ro,eta,qinlet,tinlet
    global iti,beta,divmax,imax,jmax,kmax,isum,deltch,alpha,dt,itmax,jtmax,ktmax
    global uinlet,vinlet,winlet,idtm,jdtm,kdtm
    
    #      subroutine conti
    
    #     pressure iteration
    
    iti=0
    iti=iti+1
    beta=beta0/(2.*deltat*(1./deltx2+1./delty2+1./deltz2))
    
    
    #c********* plate fin with or without stamping *********************
    
    
    if(jstam==1):
        #bccst()
        print('hi')
    else:
        bcc()
     
    
    #********** constant properties or variable properties *************
    if(icopro==1):
      ceqcp()
    else:
      #ceqvp()
      print('hi')

    while(divmax >= epsi):
      bcc()
      ceqcp() 
    
    return

def state():
    global icopro,ipara,icpara,irest,iuprof,jstam,iexit,itcalc,stab,updef 
    global iim,jim,kim,jn1,jnim,kn1,knim,kb,ia,ib,itamax,fx,fy,fz 
    global epsi,stat,tstat,beta0,alphat,re,pr,gam,xm2,twall,tentry,rtwti,grf  
    global ire,jre,kre,deltay,deltax,deltaz,rdx,rdy,rdz,deltx2,delty2,deltz2,deltat 
    global rev,pev,idt,jdt,kdt,u1,u2,v1,v2,w1,w2,t1,t2,p,ro,eta,qinlet,tinlet
    global iti,beta,divmax,imax,jmax,kmax,isum,deltch,alpha,dt,itmax,jtmax,ktmax
    global uinlet,vinlet,winlet,idtm,jdtm,kdtm
    
    for i in range(iim):
      for j in range(jim):
        for k in range(kim):
          tstr= (t1[i,j,k]*(rtwti-1.))+1.0
          ro[i,j,k]=1./tstr+gam*xm2*p[i,j,k]/tstr
          eta[i,j,k]=tstr**0.5
    
    return

def start():
    global icopro,ipara,icpara,irest,iuprof,jstam,iexit,itcalc,stab,updef 
    global iim,jim,kim,jn1,jnim,kn1,knim,kb,ia,ib,itamax,fx,fy,fz 
    global epsi,stat,tstat,beta0,alphat,re,pr,gam,xm2,twall,tentry,rtwti,grf  
    global ire,jre,kre,deltay,deltax,deltaz,rdx,rdy,rdz,deltx2,delty2,deltz2,deltat 
    global rev,pev,idt,jdt,kdt,u1,u2,v1,v2,w1,w2,t1,t2,p,ro,eta,qinlet,tinlet
    global iti,beta,divmax,imax,jmax,kmax,isum,deltch,alpha,dt,itmax,jtmax,ktmax
    global uinlet,vinlet,winlet,idtm,jdtm,kdtm
    #      subroutine start
    
    #$include 'covar'
    
    '''
    c
    c************ start of a parabolic calculation ******************
    c
          write (6,*)'has entered start'
    c
          if (ipara.eq.1) go to 3000   
    c
    c*********************************************************************
    c
    c
    c
    c*********************************************************************
    c
    '''
    jpr =jim-1
    jpl =2
    rpmj =(jpr+jpl)*0.5
    rj =float (jpr)+0.5-rpmj
    
    kpl=2
    kpr=kim-1
    rpmk=(kpr+kpl)*0.5
    rk =float(kpr)+0.5-rpmk
    
    #c**************** parabolic velocity profile ************************
    
    if(iuprof == 2):
      if((abs(fy-1.0)) <= 0.0001):
        for j in range(jim):
            for k in range(kim):
                qinlet[j,k]=(1.-((rpmj-float(j))**2/rj**2))*(1.-((rpmk-float(k))**2/rk**2))
                qinlet[j,k]=1.5*(1.-((rpmj-float(j))**2/rj**2))
      else:
        for j in range(jim):
            for k in range(kim):
                qinlet[j,k]=1.5*(1.-((rpmk-float(k))**2/rk**2))
          
    else:
        for j in range(jim):
          for k in range(kim):
            qinlet[j,k] =1.0
        
    #c**************** constant temperature profile ***********************
    
    for j in range (jim):    
      for k in range(kim):
          tinlet[j,k]=tentry
    
    for i in range(iim):
      for j in range(jim):
        for k in range(kim):
          u2[i,j,k] =qinlet[j,k]
          v2[i,j,k] =0.
          w2[i,j,k] =0.
          p[i,j,k] =1.0
          t1[i,j,k] =tentry
          
          if icopro != 1:
            ro[i,j,k]=1.
            eta[1,j,k] =1.
     
    
    
    return
    '''
    cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
    cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
    c c
    c     start of a parabolic calculation
    c
    cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
    c
    c 3000 if (irest.eq.1)  go to 888
     3000 open(92,file='result1',form='formatted')
          do 6666 i = 1,iim
          do 6666 j = 1,jim
          do 6666 k = 1,kim
          read(92,*) l,m,n,u1(i,j,k),v1(i,j,k),w1(i,j,k),p(i,j,k),t2(i,j,K)  
     6666 continue
          close(92)
    c
    c
          i =icpara
          do 130 j=1,jim
          do 130 k =1,kim
          uinlet(1,j,k) =u1(i,j,k)
          uinlet(2,j,k) =u1(i+1,j,k)
          vinlet(1,j,k) =v1(i,j,k)
          vinlet(2,j,k) =v1(i+1,j,k)
          winlet(1,j,k) =w1(i,j,k)
          winlet(2,j,k) =w1(i+1,j,k) 
          tinlet(j,k) =t2(i,j,k)
     130  continue
    c
    c
          if(irest.eq.1) go to 888
    c                     
    c
    c
    ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
    ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
    c
    c
    c
          do 140 i=2,iim
          do 140 j=1,jim
          do 140 k=1,kim
          u2(i,j,k) =u1(icpara+1,j,k)
          v2(i,j,k) =v1(icpara+1,j,k)
          w2(i,j,k) =w1(icpara+1,j,k)
          p(i,j,k)  =p(icpara+1,j,k)
          t1(i,j,k) =tinlet(j,k)
     140  continue
    c
          write(6,*) 'leaving start '
    c
     888  return
    c
          end
    c
    ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
    '''
def deltam():
    global icopro,ipara,icpara,irest,iuprof,jstam,iexit,itcalc,stab,updef 
    global iim,jim,kim,jn1,jnim,kn1,knim,kb,ia,ib,itamax,fx,fy,fz 
    global epsi,stat,tstat,beta0,alphat,re,pr,gam,xm2,twall,tentry,rtwti,grf  
    global ire,jre,kre,deltay,deltax,deltaz,rdx,rdy,rdz,deltx2,delty2,deltz2,deltat 
    global rev,pev,idt,jdt,kdt,u1,u2,v1,v2,w1,w2,t1,t2,p,ro,eta,qinlet,tinlet
    global iti,beta,divmax,imax,jmax,kmax,isum,deltch,alpha,dt,itmax,jtmax,ktmax
    global uinlet,vinlet,winlet,idtm,jdtm,kdtm,dact
    '''
    if(ipara.eq.1) call start
    if(irest.eq.1) call restar
    if(ipara.eq.1) go to 11
    '''
    if(irest == 0):
       start()
    
    if(icopro != 1):
        if(jstam==1):
            #bctst()
            print('hi')
        if(jstam==0):
            bct()
            state()
    iteration = 0
    while True:        
        conti()
        
        #********plate-fin with or without stamping**********
        
        if(jstam==1):
          #bcnsst()
          print('hi')
        else:
          bcns()
  
        #****************************************************
        
        velalt()
        
        ticorr()
        
        #      call output
        
        #energy()
        '''
        cccccccccccccccccccccccccccccccccccccccccccccccccccccc
        c    
        c     energy should not be commented for coupled
        c     N-S and energy equations
        c
        cccccccccccccccccccccccccccccccccccccccccccccccccccccc
        
        if(icopro!=1):
          state()
        else:
        go to 16
        end if
        '''
        #c******constant or variable property****************** 
        
        if(icopro ==1):
          nseqcp()
        else:
          #nseqvp()
          print('hi')
        
        #c*****plate-fin with or without stamping**************
        
        if(jstam==1):
          #bcnsst()
          print('hi')
        else:
          bcns()
        
        
        tigrad()
        
        #      go to 14
        iteration = iteration+1
        print('iteration = ',iteration)
        stop_condi = dact*deltat
        print('stop condi = ',stop_condi)
        if stop_condi<stat:
            break
    print('Run completed...')
 
print('calling deltam()')
deltam()    

#%%
import numpy as np
import matplotlib.pyplot as plt
prof_u = np.zeros((iim,jim))
prof_v = np.zeros((iim,jim))
k = 47 
for i in range(iim):
  for j in range(jim):
    prof_u[i][j] = u1[i][j][k]
    prof_v[i][j] = v1[i][j][k] 
x = np.arange(90)
y = np.arange(22)

X, Y = np.meshgrid(x, y)

plt.streamplot(X, Y, np.rot90(prof_u), np.rot90(prof_v), density = 0.5)
plt.title('Stramlines in x-y plane at z = 0.5B')
plt.ylabel('j =  1 to 22')
plt.xlabel('i =  1 to 90')
plt.show()
#%%

k=47
#i =26,44,62,80
yaxis = np.arange(22)
prof1 = np.zeros(jim)
prof2 = np.zeros(jim)
prof3 = np.zeros(jim)
prof4 = np.zeros(jim)
for j in range(jim):
  prof1[j] = u1[26][j][k]
  prof2[j] = u1[44][j][k]
  prof3[j] = u1[62][j][k]
  prof4[j] = u1[80][j][k]
  
plt.plot(prof1, yaxis, color='y', label='x=0.3L')
plt.plot(prof2, yaxis, color='b', label='x=0.5L')
plt.plot(prof3, yaxis, color='g', label='x=0.7L')
plt.plot(prof4, yaxis, color='r', label='x=0.9L')
plt.legend(loc='best')
plt.title('axial velocity profile on the xy− plane')
plt.ylabel('j =  1 to 22')
plt.xlabel('Axial velocity')
plt.show()

#%%

def energy():
    global icopro,ipara,icpara,irest,iuprof,jstam,iexit,itcalc,stab,updef 
    global iim,jim,kim,jn1,jnim,kn1,knim,kb,ia,ib,itamax,fx,fy,fz 
    global epsi,stat,tstat,beta0,alphat,re,pr,gam,xm2,twall,tentry,rtwti,grf  
    global ire,jre,kre,deltay,deltax,deltaz,rdx,rdy,rdz,deltx2,delty2,deltz2,deltat 
    global rev,pev,idt,jdt,kdt,u1,u2,v1,v2,w1,w2,t1,t2,p,ro,eta,qinlet,tinlet
    global iti,beta,divmax,imax,jmax,kmax,isum,deltch,alpha,dt,itmax,jtmax,ktmax
    global uinlet,vinlet,winlet,idtm,jdtm,kdtm
    #      subroutine energy
    
    #     solution of the energy-equation
    
    itt=1
    
    bct()
    
    teqcp()
    
    temalt()
    
    itt = itt+1
    
    while (dt>=tstat):
      bct()
      teqcp()
      temalt()
      itt = itt+1
      print('itt = ',itt)
      print('dt = ',dt)
    
    bct()
    print('energy() run completed...')
    return
energy()
#%%
k=47
#i =26,44,62,80
yaxis = np.arange(22)
prof1 = np.zeros(jim)
prof2 = np.zeros(jim)
prof3 = np.zeros(jim)
prof4 = np.zeros(jim)
for j in range(jim):
  prof1[j] = t1[26][j][k]
  prof2[j] = t1[44][j][k]
  prof3[j] = t1[62][j][k]
  prof4[j] = t1[80][j][k]
  
plt.plot(prof1, yaxis, color='y', label='x=0.3L')
plt.plot(prof2, yaxis, color='b', label='x=0.5L')
plt.plot(prof3, yaxis, color='g', label='x=0.7L')
plt.plot(prof4, yaxis, color='r', label='x=0.9L')
plt.legend(loc='best')
plt.title('temperature profile on the xy− plane')
plt.ylabel('j =  1 to 22')
plt.xlabel('Temperature')
plt.show()
#%%
